@startuml
namespace auth {
    interface AuthRepository  {
        + GetByUsername(username string) (*User, error)

    }
    class AuthService << (S,Aquamarine) >> {
        - repo AuthRepository
        - redisClient *config.RedisClient

        + LoginUser(username string, password string) (string, string, *dto.APIError, []*string)
        + RefreshAuth(refreshToken string) (string, *dto.APIError)

    }
    class LoginUserRequest << (S,Aquamarine) >> {
        + Username string
        + Password string

    }
    class LoginUserResponse << (S,Aquamarine) >> {
        + Username string
        + Roles []*string

    }
    class User << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Username string
        + PasswordHash string
        + IsActive bool
        + IsAdmin bool
        + IsHr bool
        + IsFinance bool
        + IsInventory bool
        + IsSales bool
        + IsPurchase bool
        + CreatedAt string
        + UpdatedAt string

    }
    class authRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + GetByUsername(username string) (*User, error)

    }
}

"auth.AuthRepository" <|-- "auth.authRepositoryImpl"

namespace category {
    class Category << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + CreatedAt string
        + UpdatedAt string
        + DeletedAt *string

    }
    interface CategoryRepository  {
        + GetAll(req GetCategoryRequest) ([]GetCategoryResponse, error)
        + GetByID(id string) (*GetCategoryResponse, error)
        + GetByName(name string) (*GetCategoryResponse, error)
        + Create(req CreateCategoryRequest) (*GetCategoryResponse, error)
        + Update(req UpdateCategoryRequest) (*GetCategoryResponse, error)
        + Delete(req DeleteCategoryRequest) error

    }
    class CategoryRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + GetAll(req GetCategoryRequest) ([]GetCategoryResponse, error)
        + GetByID(id string) (*GetCategoryResponse, error)
        + GetByName(name string) (*GetCategoryResponse, error)
        + Create(req CreateCategoryRequest) (*GetCategoryResponse, error)
        + Update(req UpdateCategoryRequest) (*GetCategoryResponse, error)
        + Delete(req DeleteCategoryRequest) error

    }
    class CategoryService << (S,Aquamarine) >> {
        - repo CategoryRepository

        + GetAllCategory(req GetCategoryRequest) ([]GetCategoryResponse, *dto.APIError)
        + DeleteCategory(request DeleteCategoryRequest) *dto.APIError
        + CreateCategory(request CreateCategoryRequest) (*GetCategoryResponse, *dto.APIError)
        + UpdateCategory(request UpdateCategoryRequest) (*GetCategoryResponse, *dto.APIError)

    }
    class CreateCategoryRequest << (S,Aquamarine) >> {
        + Name string
        + Description string

    }
    class DeleteCategoryRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class GetCategoryRequest << (S,Aquamarine) >> {
        + Name string

    }
    class GetCategoryResponse << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + CreatedAt string
        + UpdatedAt string

    }
    class UpdateCategoryRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string

    }
}

"category.CategoryRepository" <|-- "category.CategoryRepositoryImpl"

namespace config {
    class RedisClient << (S,Aquamarine) >> {
        - client *redis.Client

        + Set(key string, value <font color=blue>interface</font>{}, expiration time.Duration) error
        + Get(key string) (string, error)
        + Delete(key string) error

    }
}


namespace dto {
    class APIError << (S,Aquamarine) >> {
        + StatusCode int
        + Details <font color=blue>map</font>[string]string

    }
}


namespace employee {
    class CreateEmployeeRequest << (S,Aquamarine) >> {
        + Name string
        + Phone string
        + Nik string
        + Position string
        + HiredDate string

    }
    class DeleteEmployeeRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class Employee << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Position string
        + Phone string
        + Nik string
        + HiredDate string
        + CreatedAt string
        + UpdatedAt string
        + DeletedAt string

    }
    interface EmployeeRepository  {
        + Create(request CreateEmployeeRequest) error
        + Delete(request DeleteEmployeeRequest) error
        + Update(request UpdateEmployeeRequest) error
        + GetAll(name string) ([]GetEmployeeResponse, error)
        + GetByID(id string) (*GetEmployeeResponse, error)
        + GetByNIK(nik string) (*GetEmployeeResponse, error)
        + GetByPhone(phone string) (*GetEmployeeResponse, error)

    }
    class EmployeeService << (S,Aquamarine) >> {
        - repo EmployeeRepository

        + CreateEmployee(request CreateEmployeeRequest) *dto.APIError
        + UpdateEmployee(request UpdateEmployeeRequest) *dto.APIError
        + DeleteEmployee(request DeleteEmployeeRequest) *dto.APIError
        + GetAllEmployees(name string) ([]GetEmployeeResponse, *dto.APIError)

    }
    class GetEmployeeResponse << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Nik string
        + Phone string
        + Position string
        + HiredDate string
        + CreatedAt string
        + UpdatedAt string

    }
    class UpdateEmployeeRequest << (S,Aquamarine) >> {
        + Name string
        + Position string
        + Phone string
        + Nik string
        + HiredDate string
        + ID uuid.UUID

    }
    class employeeRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + Create(request CreateEmployeeRequest) error
        + Delete(request DeleteEmployeeRequest) error
        + Update(request UpdateEmployeeRequest) error
        + GetAll(name string) ([]GetEmployeeResponse, error)
        + GetByID(id string) (*GetEmployeeResponse, error)
        + GetByNIK(nik string) (*GetEmployeeResponse, error)
        + GetByPhone(phone string) (*GetEmployeeResponse, error)

    }
}

"employee.EmployeeRepository" <|-- "employee.employeeRepositoryImpl"

namespace main {
    class Services << (S,Aquamarine) >> {
        + AuthService *auth.AuthService
        + UserService *user.UserService
        + EmployeeService *employee.EmployeeService
        + WageService *wage.WageService
        + ProductService *transaction.ProductService
        + CategoryService *category.CategoryService
        + UnitService *unit.UnitService

    }
}


namespace transaction {
    class CreateProductRequest << (S,Aquamarine) >> {
        + Name string
        + Description string
        + Price float64
        + CategoryID string
        + UnitID string

    }
    class DeleteProductRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class GetProductRequest << (S,Aquamarine) >> {
        + Name string
        + Category string
        + Unit string

    }
    class GetProductResponse << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + Price float64
        + Category string
        + Unit string
        + CreatedAt string
        + UpdatedAt string

    }
    class Product << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + Price float64
        + CategoryID uuid.UUID
        + UnitID uuid.UUID
        + CreatedAt string
        + UpdatedAt string
        + DeletedAt *string

    }
    interface ProductRepository  {
        + GetAll(req GetProductRequest) ([]GetProductResponse, int, error)
        + GetByID(id string) (*GetProductResponse, error)
        + GetByName(name string) (*GetProductResponse, error)
        + Create(req CreateProductRequest) (*GetProductResponse, error)
        + Update(req UpdateProductRequest) (*GetProductResponse, error)
        + Delete(req DeleteProductRequest) error
        + GetCategoryByID(id string) (*category.GetCategoryResponse, error)
        + GetUnitByID(id string) (*unit.GetUnitResponse, error)

    }
    class ProductRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + GetAll(req GetProductRequest) ([]GetProductResponse, int, error)
        + GetByID(id string) (*GetProductResponse, error)
        + GetCategoryByID(id string) (*category.GetCategoryResponse, error)
        + GetUnitByID(id string) (*unit.GetUnitResponse, error)
        + GetByName(name string) (*GetProductResponse, error)
        + Create(req CreateProductRequest) (*GetProductResponse, error)
        + Update(req UpdateProductRequest) (*GetProductResponse, error)
        + Delete(req DeleteProductRequest) error

    }
    class ProductService << (S,Aquamarine) >> {
        - repo ProductRepository

        + GetAllProducts(search GetProductRequest) ([]GetProductResponse, int, *dto.APIError)
        + GetProductByID(id string) (*GetProductResponse, *dto.APIError)
        + GetProductByName(name string) (*GetProductResponse, *dto.APIError)
        + CreateProduct(request CreateProductRequest) (*GetProductResponse, *dto.APIError)
        + UpdateProduct(request UpdateProductRequest) (*GetProductResponse, *dto.APIError)
        + DeleteProduct(request DeleteProductRequest) *dto.APIError

    }
    class UpdateProductRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + Price float64
        + CategoryID string
        + UnitID string

    }
}
"utils.PaginationParameter" *-- "transaction.GetProductRequest"

"transaction.ProductRepository" <|-- "transaction.ProductRepositoryImpl"

namespace role {
    class AssignRoleRequest << (S,Aquamarine) >> {
        + UserID uuid.UUID
        + RoleID uuid.UUID

    }
    class CreateRoleRequest << (S,Aquamarine) >> {
        + Name string
        + Description string

    }
    class DeleteRoleRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class GetAllRoleRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + CreatedAt string
        + UpdatedAt string

    }
    class GetRoleRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + CreatedAt string
        + UpdatedAt string

    }
    class Role << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + CreatedAt string
        + UpdatedAt string

    }
    interface RoleRepository  {
        + GetUserByID(id string) (*user.GetUserResponse, error)

    }
    class RoleService << (S,Aquamarine) >> {
        - repo RoleRepository

    }
    class UnassignRoleRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class UpdateRoleRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string

    }
    class UserRole << (S,Aquamarine) >> {
        + ID uuid.UUID
        + UserID uuid.UUID
        + RoleID uuid.UUID
        + AssignedAt string

    }
    class roleRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + GetUserByID(id string) (*user.GetUserResponse, error)

    }
}

"role.RoleRepository" <|-- "role.roleRepositoryImpl"

namespace unit {
    class CreateUnitRequest << (S,Aquamarine) >> {
        + Name string
        + Description string

    }
    class DeleteUnitRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class GetUnitRequest << (S,Aquamarine) >> {
        + Name string

    }
    class GetUnitResponse << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + CreatedAt string
        + UpdatedAt string

    }
    class Unit << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string
        + CreatedAt string
        + UpdatedAt string
        + DeletedAt *string

    }
    interface UnitRepository  {
        + GetAll(req GetUnitRequest) ([]GetUnitResponse, error)
        + GetByID(id string) (*GetUnitResponse, error)
        + GetByName(name string) (*GetUnitResponse, error)
        + Create(req CreateUnitRequest) (*GetUnitResponse, error)
        + Update(req UpdateUnitRequest) (*GetUnitResponse, error)
        + Delete(req DeleteUnitRequest) error

    }
    class UnitRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + GetAll(req GetUnitRequest) ([]GetUnitResponse, error)
        + GetByID(id string) (*GetUnitResponse, error)
        + GetByName(name string) (*GetUnitResponse, error)
        + Create(req CreateUnitRequest) (*GetUnitResponse, error)
        + Update(req UpdateUnitRequest) (*GetUnitResponse, error)
        + Delete(req DeleteUnitRequest) error

    }
    class UnitService << (S,Aquamarine) >> {
        - repo UnitRepository

        + GetAllUnit(req GetUnitRequest) ([]GetUnitResponse, *dto.APIError)
        + DeleteUnit(request DeleteUnitRequest) *dto.APIError
        + CreateUnit(request CreateUnitRequest) (*GetUnitResponse, *dto.APIError)
        + UpdateUnit(request UpdateUnitRequest) (*GetUnitResponse, *dto.APIError)

    }
    class UpdateUnitRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Name string
        + Description string

    }
}

"unit.UnitRepository" <|-- "unit.UnitRepositoryImpl"

namespace user {
    class CreateUserRequest << (S,Aquamarine) >> {
        + Username string
        + Password string
        + ConfirmPassword string
        + IsAdmin bool
        + IsHr bool
        + IsFinance bool
        + IsInventory bool
        + IsSales bool
        + IsPurchase bool

    }
    class GetUserResponse << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Username string
        + Role *[]string
        + IsActive bool
        + CreatedAt string
        + UpdatedAt string

    }
    class UpdateUserCredentialRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Password string
        + ConfirmPassword string

    }
    class UpdateUserRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + IsAdmin bool
        + IsHr bool
        + IsFinance bool
        + IsInventory bool
        + IsSales bool
        + IsPurchase bool
        + Username string
        + IsActive bool

    }
    class User << (S,Aquamarine) >> {
        + ID uuid.UUID
        + Username string
        + PasswordHash string
        + IsActive bool
        + IsAdmin bool
        + IsHr bool
        + IsFinance bool
        + IsInventory bool
        + IsSales bool
        + IsPurchase bool
        + CreatedAt string
        + UpdatedAt string

    }
    interface UserRepository  {
        + Create(req CreateUserRequest) error
        + GetByUsername(username string) (*GetUserResponse, error)
        + GetByID(id string) (*GetUserResponse, error)
        + Update(req UpdateUserRequest) error
        + GetAll(search string) ([]*GetUserResponse, error)
        + UpdateCredential(req UpdateUserCredentialRequest) error

    }
    class UserService << (S,Aquamarine) >> {
        - repo UserRepository

        + CreateUser(request CreateUserRequest) *dto.APIError
        + Update(request UpdateUserRequest) *dto.APIError
        + UpdateCredential(request UpdateUserCredentialRequest) *dto.APIError
        + GetAllUsers(search string) ([]*GetUserResponse, error)

    }
    class userRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + Create(req CreateUserRequest) error
        + GetByUsername(username string) (*GetUserResponse, error)
        + GetByID(id string) (*GetUserResponse, error)
        + Update(req UpdateUserRequest) error
        + GetAll(search string) ([]*GetUserResponse, error)
        + UpdateCredential(req UpdateUserCredentialRequest) error

    }
}

"user.UserRepository" <|-- "user.userRepositoryImpl"

namespace utils {
    class PaginatedHandler << (S,Aquamarine) >> {
        - handlerFunc <font color=blue>func</font>(http.ResponseWriter, *http.Request, int, int, string, string) 

    }
    class PaginationParameter << (S,Aquamarine) >> {
        + Page int
        + PageSize int
        + SortBy string
        + SortOrder string

    }
    class PaginationResponse << (S,Aquamarine) >> {
        + CurrentPage int
        + TotalPages int
        + TotalItems int
        + Items <font color=blue>interface</font>{}

    }
}


namespace wage {
    class CreateWageRequest << (S,Aquamarine) >> {
        + EmployeeId uuid.UUID
        + Month int
        + Year int
        + WageDetail []WageDetailRequest

    }
    class DeleteWageDetailRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class DeleteWageRequest << (S,Aquamarine) >> {
        + ID uuid.UUID

    }
    class GetWageDetail << (S,Aquamarine) >> {
        + ID uuid.UUID
        + ComponentName string
        + Description string
        + Amount float64
        + CreatedAt string
        + UpdatedAt string

    }
    class GetWageDetailResponse << (S,Aquamarine) >> {
        + ID uuid.UUID
        + EmployeeId uuid.UUID
        + EmployeeName string
        + TotalAmount float64
        + Month int
        + Year int
        + CreatedAt string
        + UpdatedAt string
        + Detail []*GetWageDetail

    }
    class GetWageRequest << (S,Aquamarine) >> {
        + EmployeeId string
        + Month int
        + Year int
        + Page int
        + PageSize int
        + SortBy string
        + SortOrder string

    }
    class GetWageResponse << (S,Aquamarine) >> {
        + ID uuid.UUID
        + EmployeeId uuid.UUID
        + EmployeeName string
        + TotalAmount float64
        + Month int
        + Year int
        + CreatedAt string
        + UpdatedAt string

    }
    class UpdateWageDetailRequest << (S,Aquamarine) >> {
        + ID uuid.UUID
        + WageDetail []WageDetailRequest

    }
    class Wage << (S,Aquamarine) >> {
        + ID uuid.UUID
        + EmployeeId uuid.UUID
        + TotalAmount float64
        + Month int
        + Year int
        + CreatedAt string
        + UpdatedAt string
        + DeletedAt string

    }
    class WageDetail << (S,Aquamarine) >> {
        + ID uuid.UUID
        + WageId uuid.UUID
        + ComponentName string
        + Description string
        + Amount float64
        + CreatedAt string
        + UpdatedAt string
        + DeletedAt string

    }
    class WageDetailRequest << (S,Aquamarine) >> {
        + ComponentName string
        + Description string
        + Amount float64

    }
    interface WageRepository  {
        + Create(request CreateWageRequest) error
        + CreateDetail(request WageDetailRequest) error
        + Delete(request DeleteWageRequest) error
        + UpdateDetail(request UpdateWageDetailRequest) error
        + GetAll(request GetWageRequest) ([]GetWageResponse, int, error)
        + GetWageDetailByWageID(wageID string) ([]*GetWageDetail, error)
        + GetByID(id string) (*GetWageResponse, error)
        + GetDetailByID(id string) (*WageDetail, error)
        + GetEmployeeByID(id string) (*employee.GetEmployeeResponse, error)
        + GetByEmployeeIdAndMonthYear(employeeId string, month int, year int) (*GetWageResponse, error)

    }
    class WageRepositoryImpl << (S,Aquamarine) >> {
        - db *sql.DB

        + GetEmployeeByID(id string) (*employee.GetEmployeeResponse, error)
        + Create(request CreateWageRequest) error
        + CreateDetail(request WageDetailRequest) error
        + Delete(request DeleteWageRequest) error
        + UpdateDetail(request UpdateWageDetailRequest) error
        + GetAll(request GetWageRequest) ([]GetWageResponse, int, error)
        + GetWageDetailByWageID(wageID string) ([]*GetWageDetail, error)
        + GetByID(id string) (*GetWageResponse, error)
        + GetDetailByID(id string) (*WageDetail, error)
        + GetByEmployeeIdAndMonthYear(employeeId string, month int, year int) (*GetWageResponse, error)

    }
    class WageService << (S,Aquamarine) >> {
        - repo WageRepository

        + GetAllWages(req GetWageRequest) ([]GetWageResponse, int, *dto.APIError)
        + DeleteWage(request DeleteWageRequest) *dto.APIError
        + GetWageDetail(wageID string) (*GetWageDetailResponse, *dto.APIError)
        + CreateWage(request CreateWageRequest) *dto.APIError
        + UpdateWage(request UpdateWageDetailRequest) *dto.APIError

    }
}

"wage.WageRepository" <|-- "wage.WageRepositoryImpl"

@enduml
